/**
 * Copyright (C) 2019, Hensoldt Cyber GmbH
 */

import <std_connector.camkes>;

import <if_OS_Entropy.camkes>;

import "components/Tests/test_CryptoServer_access.camkes";
import "components/Tests/test_CryptoServer.camkes";

#include "system_config.h"

#include "CryptoServer/camkes/CryptoServer.camkes"
CryptoServer_COMPONENT_DECLARE(CryptoServer)

#include "EntropySource/camkes/EntropySource.camkes"
DECLARE_COMPONENT_EntropySource(EntropySource)

#include "RamDisk/RamDisk.camkes"
DECLARE_COMPONENT_RamDisk(RamDisk)

// 8 handles are sufficient
#define CLIENT_HANDLE_MGR_CAPACITY 8

assembly {
    composition {
        // Set up components required by CryptoServer and connect
        component CryptoServer  cryptoServer;
        component RamDisk       ramDisk;
        component EntropySource entropySource;

        CryptoServer_INSTANCE_CONNECT(cryptoServer,
            entropySource.entropy_rpc, entropySource.entropy_port,
            ramDisk.storage_rpc,       ramDisk.storage_port
        )

        // Set up clients of CryptoServer and connect
        component   test_CryptoServer_access_1  accessTest_1;
        component   test_CryptoServer_access_2  accessTest_2;
        component   test_CryptoServer_access_3  accessTest_3;
        component   test_CryptoServer_access_4  accessTest_4;
        component   test_CryptoServer           unitTest;

        CryptoServer_INSTANCE_CONNECT_CLIENTS(cryptoServer,
            accessTest_1.cryptoServer_rpc, accessTest_1.cryptoServer_port,
            accessTest_2.cryptoServer_rpc, accessTest_2.cryptoServer_port,
            accessTest_3.cryptoServer_rpc, accessTest_3.cryptoServer_port,
            accessTest_4.cryptoServer_rpc, accessTest_4.cryptoServer_port,
            unitTest.cryptoServer_rpc,     unitTest.cryptoServer_port
        )
    }

    configuration{
        // Assign client badge to both interfaces
        CryptoServer_CLIENT_ASSIGN_BADGE(
          accessTest_1.cryptoServer_rpc, CRYPTOSERVER_ID_accessTest_1
        )
        CryptoServer_CLIENT_ASSIGN_BADGE(
          accessTest_2.cryptoServer_rpc, CRYPTOSERVER_ID_accessTest_2
        )
        CryptoServer_CLIENT_ASSIGN_BADGE(
          accessTest_3.cryptoServer_rpc, CRYPTOSERVER_ID_accessTest_3
        )
        CryptoServer_CLIENT_ASSIGN_BADGE(
          accessTest_4.cryptoServer_rpc, CRYPTOSERVER_ID_accessTest_4
        )
        CryptoServer_CLIENT_ASSIGN_BADGE(
          untitTest.cryptoServer_rpc, CRYPTOSERVER_ID_unitTest
        )

        cryptoServer.cryptoServer_config = {
            "clients": [
                // Keys of client 0 can be loaded by client 1
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,0,0,0,0],
                  "handleMgrCapacity": CLIENT_HANDLE_MGR_CAPACITY },
                // Keys of client 1 can be loaded by client 1, 2
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,2,0,0,0],
                  "handleMgrCapacity": CLIENT_HANDLE_MGR_CAPACITY },
                // Keys of client 2 can be loaded by client 1, 2, 3
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,2,3,0,0],
                  "handleMgrCapacity": CLIENT_HANDLE_MGR_CAPACITY },
                // Keys of client 3 can be loaded by client 1, 2, 3, 4
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,2,3,4,0],
                   "handleMgrCapacity": CLIENT_HANDLE_MGR_CAPACITY },
                // Keys of client 4 (unit test) can be loaded only by client 5
                { "storageLimit": 1024*12,
                   "allowedIds":  [5,0,0,0,0],
                   "handleMgrCapacity": CLIENT_HANDLE_MGR_CAPACITY },
            ]
        };
    }
}

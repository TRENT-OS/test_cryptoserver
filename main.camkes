/**
 * Copyright (C) 2019, Hensoldt Cyber GmbH
 */

import <std_connector.camkes>;

import <CryptoServer/camkes/CryptoServer.camkes>;

import "components/Tests/test_CryptoServer_access.camkes";
import "components/Tests/test_CryptoServer.camkes";

#include "system_config.h"

#include "UART/uart.camkes"
DECLARE_COMPONENT_UART(UART)

#define CHANMUX_COMPONENT_NAME  ChanMux
#define CHANMUX_UPPER_INTERFACES "components/ChanMux/ChanMux_upper_interface.camkes"
#include "ChanMux/ChanMux.camkes"


assembly {
    composition {
        DECLARE_AND_CONNECT_INSTANCE_UART(
            UART, uartDrv)

        DECLARE_AND_CONNECT_INSTANCE_CHANMUX(
            ChanMux, chanMux,
            uartDrv.UartDrv, uartDrv.inputDataPort,
            uartDrv.Output)

        component   CryptoServer                cryptoServer;
        component   test_CryptoServer_access_0  accessTest_0;
        component   test_CryptoServer_access_1  accessTest_1;
        component   test_CryptoServer_access_2  accessTest_2;
        component   test_CryptoServer_access_3  accessTest_3;
        component   test_CryptoServer           unitTest;

        // CryptoServer <-> ChanMux
        connection  seL4RPCCall         call_2      ( from cryptoServer.chanMux_rpc,
                                                      to chanMux.chanMux_rpc );
        connection  seL4SharedData      shared_1    ( from cryptoServer.chanMux_port,
                                                      to chanMux.cryptoServer_port );
        connection  seL4Notification    note_0      ( from chanMux.cryptoServer_event_hasData,
                                                      to cryptoServer.chanMux_event_hasData );

        // test_CryptoServer_access_0 <-> CryptoServer::CryptoAPI RPC
        connection  seL4RPCCall         call_3      ( from accessTest_0.CryptoLibServer,
                                                      to cryptoServer.CryptoLibServer );
        connection  seL4SharedData      shared_2    ( from accessTest_0.CryptoLibDataport,
                                                      to cryptoServer.CryptoLibDataport );
        // test_CryptoServer_access_0 <-> CryptoServer::CryptoServer RPC
        connection  seL4RPCCall         call_4      ( from accessTest_0.CryptoServer,
                                                      to cryptoServer.CryptoServer );

        // test_CryptoServer_access_1 <-> CryptoServer::CryptoAPI RPC
        connection  seL4RPCCall         call_5      ( from accessTest_1.CryptoLibServer,
                                                      to cryptoServer.CryptoLibServer );
        connection  seL4SharedData      shared_3    ( from accessTest_1.CryptoLibDataport,
                                                      to cryptoServer.CryptoLibDataport );
        // test_CryptoServer_access_1 <-> CryptoServer::CryptoServer RPC
        connection  seL4RPCCall         call_6      ( from accessTest_1.CryptoServer,
                                                      to cryptoServer.CryptoServer );

        // test_CryptoServer_access_2 <-> CryptoServer::CryptoAPI RPC
        connection  seL4RPCCall         call_7      ( from accessTest_2.CryptoLibServer,
                                                      to cryptoServer.CryptoLibServer );
        connection  seL4SharedData      shared_4    ( from accessTest_2.CryptoLibDataport,
                                                      to cryptoServer.CryptoLibDataport );
        // test_CryptoServer_access_2 <-> CryptoServer::CryptoServer RPC
        connection  seL4RPCCall         call_8      ( from accessTest_2.CryptoServer,
                                                      to cryptoServer.CryptoServer );

        // test_CryptoServer_access_3 <-> CryptoServer::CryptoAPI RPC
        connection  seL4RPCCall         call_9      ( from accessTest_3.CryptoLibServer,
                                                      to cryptoServer.CryptoLibServer );
        connection  seL4SharedData      shared_5    ( from accessTest_3.CryptoLibDataport,
                                                      to cryptoServer.CryptoLibDataport );
        // test_CryptoServer_access_3 <-> CryptoServer::CryptoServer RPC
        connection  seL4RPCCall         call_10     ( from accessTest_3.CryptoServer,
                                                      to cryptoServer.CryptoServer );

        // unitTest <-> CryptoServer::CryptoAPI RPC
        connection  seL4RPCCall         call_11     ( from unitTest.CryptoLibServer,
                                                       to cryptoServer.CryptoLibServer );
        connection  seL4SharedData      shared_6    ( from unitTest.CryptoLibDataport,
                                                      to cryptoServer.CryptoLibDataport );
        // unitTest <-> CryptoServer::CryptoServer RPC
        connection  seL4RPCCall         call_12     ( from unitTest.CryptoServer,
                                                      to cryptoServer.CryptoServer );
    }

    configuration{
        CONFIGURE_INSTANCE_UART(
            uartDrv,
            CFG_CHANMUX_DEFAULT_UART_PHYS_ADDR,
            CFG_CHANMUX_DEFAULT_UART_INTR)

        // assign endpoint badges for n:1 RPC interface of ChanMUX. The generic
        // naming scheme is <component>.<interface>_attributes = <badge ID>
        cryptoServer.chanMux_rpc_attributes = CHANMUX_ID_CRYPTOSERVER;

        // When assigning IDs for each app, we need to ensure that they have the
        // SAME ID on both interfaces; the CryptoServer IF will be used to init
        // crypto and keystore contexts, the CryptoLibServer IF will be used
        // to use those -- so they MUST match!!!
        accessTest_0.CryptoServer_attributes         = CRYPTOSERVER_ID_accessTest_0;
        accessTest_0.CryptoLibServer_attributes      = CRYPTOSERVER_ID_accessTest_0;

        accessTest_1.CryptoServer_attributes         = CRYPTOSERVER_ID_accessTest_1;
        accessTest_1.CryptoLibServer_attributes      = CRYPTOSERVER_ID_accessTest_1;

        accessTest_2.CryptoServer_attributes         = CRYPTOSERVER_ID_accessTest_2;
        accessTest_2.CryptoLibServer_attributes      = CRYPTOSERVER_ID_accessTest_2;

        accessTest_3.CryptoServer_attributes         = CRYPTOSERVER_ID_accessTest_3;
        accessTest_3.CryptoLibServer_attributes      = CRYPTOSERVER_ID_accessTest_3;

        unitTest.CryptoServer_attributes             = CRYPTOSERVER_ID_unitTest;
        unitTest.CryptoLibServer_attributes          = CRYPTOSERVER_ID_unitTest;

        cryptoServer.config = {
            // Configure how many clients we have
            "numClients":   5,
            "clients": [
                // Keys of client 0 can be loaded by client 0
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,0,0,0,0] },
                // Keys of client 1 can be loaded by client 0, 1
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,1,0,0,0] },
                // Keys of client 2 can be loaded by client 0, 1, 2
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,1,1,0,0] },
                // Keys of client 3 can be loaded by client 0, 1, 2, 3
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,1,1,1,0] },
                // Keys of client 4 (unit test) can be loaded only by client 4
                { "storageLimit": 1024*12,
                   "allowedIds":  [0,0,0,0,1] },
            ]
        };

        // Semaphore to sync RPC with init
        cryptoServer.sem_init = 0;
    }
}

/**
 * Copyright (C) 2019, Hensoldt Cyber GmbH
 */

import <std_connector.camkes>;

import <if_OS_EntropySource.camkes>;

import "components/Tests/test_CryptoServer_access.camkes";
import "components/Tests/test_CryptoServer.camkes";

#include "system_config.h"

#include "CryptoServer/camkes/CryptoServer.camkes"
DECLARE_COMPONENT_CryptoServer(CryptoServer)

#include "EntropySource/camkes/EntropySource.camkes"
DECLARE_COMPONENT_EntropySource(EntropySource)

#include "RamDisk/RamDisk.camkes"
DECLARE_COMPONENT_RamDisk(RamDisk)

assembly {
    composition {
        component   test_CryptoServer_access_0  accessTest_0;
        component   test_CryptoServer_access_1  accessTest_1;
        component   test_CryptoServer_access_2  accessTest_2;
        component   test_CryptoServer_access_3  accessTest_3;
        component   test_CryptoServer           unitTest;

        component RamDisk ramDisk;
        component EntropySource entropySource;

        DECLARE_AND_CONNECT_INSTANCE_CryptoServer(
            CryptoServer, cryptoServer,
            entropySource.entropySource_rpc, entropySource.entropySource_dp,
            ramDisk.storage_rpc, ramDisk.storage_port,
            accessTest_0.crypto_rpc, accessTest_0.crypto_port, accessTest_0.cryptoServer_rpc,
            accessTest_1.crypto_rpc, accessTest_1.crypto_port, accessTest_1.cryptoServer_rpc,
            accessTest_2.crypto_rpc, accessTest_2.crypto_port, accessTest_2.cryptoServer_rpc,
            accessTest_3.crypto_rpc, accessTest_3.crypto_port, accessTest_3.cryptoServer_rpc,
            unitTest.crypto_rpc,     unitTest.crypto_port,     unitTest.cryptoServer_rpc)
    }

    configuration{
        // Assign client badge to both interfaces
        ASSIGN_CLIENT_BADGE_CryptoServer(accessTest_0,
          cryptoServer_rpc, crypto_rpc, CRYPTOSERVER_ID_accessTest_0)
        ASSIGN_CLIENT_BADGE_CryptoServer(accessTest_1,
          cryptoServer_rpc, crypto_rpc, CRYPTOSERVER_ID_accessTest_1)
        ASSIGN_CLIENT_BADGE_CryptoServer(accessTest_2,
          cryptoServer_rpc, crypto_rpc, CRYPTOSERVER_ID_accessTest_2)
        ASSIGN_CLIENT_BADGE_CryptoServer(accessTest_3,
          cryptoServer_rpc, crypto_rpc, CRYPTOSERVER_ID_accessTest_3)
        ASSIGN_CLIENT_BADGE_CryptoServer(untitTest,
          cryptoServer_rpc, crypto_rpc, CRYPTOSERVER_ID_unitTest)

        // Init the internal semaphore
        INIT_SEMAPHORES_CryptoServer(cryptoServer)

        cryptoServer.cryptoServer_config = {
            "clients": [
                // Keys of client 0 can be loaded by client 0
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,0,0,0,0] },
                // Keys of client 1 can be loaded by client 0, 1
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,1,0,0,0] },
                // Keys of client 2 can be loaded by client 0, 1, 2
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,1,1,0,0] },
                // Keys of client 3 can be loaded by client 0, 1, 2, 3
                { "storageLimit": 1024*2,
                  "allowedIds":   [1,1,1,1,0] },
                // Keys of client 4 (unit test) can be loaded only by client 4
                { "storageLimit": 1024*12,
                   "allowedIds":  [0,0,0,0,1] },
            ]
        };
    }
}
